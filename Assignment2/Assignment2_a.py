# -*- coding: utf-8 -*-
"""Assignment2_spec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BVkilnuZIZ1eOEWGewCaMmWJfcdISfKK
"""

import numpy as np
import librosa
import os
from sklearn import svm
from sklearn import metrics
from cmath import exp, pi
from math import ceil as ceil
from math import log as log
import cmath
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt
import scipy
import pickle
import scipy.io.wavfile
import random

'''
Reference: https://towardsdatascience.com/understanding-audio-data-fourier-transform-fft-spectrogram-and-speech-recognition-a4072d228520
'''

def dft(x):
    x = np.asarray(x, dtype=float)
    N = x.shape[0]
    n = np.arange(N)
    k = n.reshape((N, 1))
    M = np.exp(-2j * np.pi * k * n / N)
    return np.dot(M, x)

def spectrogram(samples, sample_rate):

    stride_ms = 10.0 
    window_ms = 20.0
    eps = 10 ** (-12)

    len_samples = len(samples) 

    stride_size = int(0.001 * sample_rate * stride_ms)
    window_size = int(0.001 * sample_rate * window_ms)

    truncate_size = (len_samples - window_size) % stride_size
    samples = samples[:len_samples - truncate_size]
    nshape = (window_size, (len_samples - window_size) // stride_size + 1)
    nstrides = (samples.strides[0], samples.strides[0] * stride_size)
    windows = np.lib.stride_tricks.as_strided(samples, shape = nshape, strides = nstrides)
    
    weighting = np.hanning(window_size)[:, None]

    ft = dft(windows*weighting)

    ft = np.absolute(ft)
    ft = ft**2
    
    scale = np.sum(weighting**2) * sample_rate
    ft[1:-1, :] *= (2.0 / scale)
    ft[(0, -1), :] /= scale
    
    freqs = float(sample_rate) / window_size * np.arange(ft.shape[0])

    max_freq = np.max(freqs)
    
    ind = np.where(freqs <= max_freq)[0][-1] + 1
    specgram = np.log(ft[:ind, :] + eps)
   
    return specgram

classes = ['zero', 'one', 'two'	,'three','four'	,'five'	,'six'	,'seven',	'eight','nine']
training_dir = '/content/drive/My Drive/MCA/HW-2/Dataset/training/'

X_train = []
Y_train = []

noise_path = '/content/drive/My Drive/MCA/HW-2/Dataset/_background_noise_/'
noise_files = os.listdir(noise_path)

add_noise = True
 
for n, c in enumerate(classes):
  class_path = training_dir + c + '/'

  class_list = os.listdir(class_path)
  
  for sn, sample in enumerate(class_list):

    file = class_path + sample

    rate, signal = scipy.io.wavfile.read(file)

    if add_noise:
      if sn % 5 == 0:
        noise_index = random.randint(0, len(noise_files)-1)

        file_noise = noise_path + noise_files[noise_index]

        sample_rate_noise, signal_noise = scipy.io.wavfile.read(file_noise)

        start = random.randint(0, len(signal_noise)-len(signal)-1)

        signal_noise = signal_noise[start:start + len(signal)]

        print(n, sn)
      else:
        signal_noise = signal-signal

    if add_noise:
      spectrogram_found = spectrogram(signal + 0.0001*signal_noise, rate)
    else:
      spectrogram_found = spectrogram(signal, rate)

    if spectrogram_found.shape[1] != 99:
        spectrogram_found = np.concatenate((spectrogram_found, np.zeros((320, 99-spectrogram_found.shape[1]))), axis = 1)

    #plt.plot(spectrogram_found)
    #plt.show()

    X_train.append(np.ravel(spectrogram_found))
    Y_train.append(n)

val_dir = '/content/drive/My Drive/MCA/HW-2/Dataset/validation/'

X_val = []
Y_val = []

for N, c in enumerate(classes):
  class_path = val_dir + c + '/'

  class_list = os.listdir(class_path)

  print(N, len(class_list))
  
  for sn, sample in enumerate(class_list):

    file = class_path + sample

    rate, samples = scipy.io.wavfile.read(file)

    spectrogram_found = spectrogram(samples, rate)

    if spectrogram_found.shape[1] != 99:
        spectrogram_found = np.concatenate((spectrogram_found, np.zeros((320, 99-spectrogram_found.shape[1]))), axis = 1)

    X_val.append(np.ravel(spectrogram_found))
    Y_val.append(N)


print("Saving")

nm_out = '/content/drive/My Drive/MCA/HW-2/spects_dft_noise.pkl'
outfile = open(nm_out, 'wb')
np.save(outfile, X_train)


print("Training")
clf = svm.SVC(kernel='rbf', gamma='scale')
clf.fit(X_train, Y_train)

print("Eval")
y_true = Y_val
y_pred = clf.predict(X_val)

print(metrics.f1_score(y_true, y_pred, average='weighted'))
print(metrics.precision_score(y_true, y_pred, average='weighted'))
print(metrics.recall_score(y_true, y_pred, average='weighted'))

print("Saving model")
filename = '/content/drive/My Drive/MCA/HW-2/useful/SVM1_spect_noise.sav'
pickle.dump(clf, open(filename, 'wb'))

print("Saving")

nm_out = '/content/drive/My Drive/MCA/HW-2/spects_1_train_X_257x128.pkl'
outfile = open(nm_out, 'wb')
np.save(outfile, X_train)

nm_out = '/content/drive/My Drive/MCA/HW-2/spects_1__train_Y_257x128.pkl'
outfile = open(nm_out, 'wb')
np.save(outfile, Y_train)

nm_out = '/content/drive/My Drive/MCA/HW-2/spects_1__val_X_257x128.pkl'
outfile = open(nm_out, 'wb')
np.save(outfile, X_val)

nm_out = '/content/drive/My Drive/MCA/HW-2/spects_1_val_Y_257x128.pkl'
outfile = open(nm_out, 'wb')
np.save(outfile, Y_val)

print("Training")
clf = svm.SVC(kernel='rbf', gamma='scale')
clf.fit(X_train, Y_train)

print("Eval")

y_true = Y_val
y_pred = clf.predict(X_val)

print(metrics.f1_score(y_true, y_pred, average='weighted'))
print(metrics.f1_score(y_true, y_pred, average='macro'))
print(metrics.f1_score(y_true, y_pred, average='micro'))

import numpy as np
from sklearn import svm
from sklearn import metrics
import os
import random
import scipy.io.wavfile
import pickle


print("Loading")

#X_train = np.load('/content/drive/My Drive/MCA/HW-2/useful/spec_train_X_dft.pkl', allow_pickle='True')
X_train = np.load('/content/drive/My Drive/MCA/HW-2/spects_dft_noise.pkl', allow_pickle='True')
print(X_train.shape)
Y_train = np.load('/content/drive/My Drive/MCA/HW-2/useful/spec_train_Y_dft.pkl', allow_pickle='True')

X_val =  np.load('/content/drive/My Drive/MCA/HW-2/useful/spec_val_X_dft.pkl', allow_pickle='True')
Y_val = np.load('/content/drive/My Drive/MCA/HW-2/useful/spec_val_Y_dft.pkl', allow_pickle='True')

print("Training")
clf = svm.SVC(kernel='rbf', gamma = 'scale')
clf.fit(X_train, Y_train)

print("Eval")
y_true = Y_val
y_pred = clf.predict(X_val)

print(metrics.f1_score(y_true, y_pred, average='weighted'))
print(metrics.precision_score(y_true, y_pred, average='weighted'))
print(metrics.recall_score(y_true, y_pred, average='weighted'))


print("Saving model")
filename = '/content/drive/My Drive/MCA/HW-2/useful/SVM1_spect_noise.sav'
pickle.dump(clf, open(filename, 'wb'))

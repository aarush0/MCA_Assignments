# -*- coding: utf-8 -*-
"""correlogram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16z6SNhxQxCOjaLYDOf9mYSyw9FdBTxBa
"""

def quantize_colors(img):
  img_new = np.zeros((256,256))

  for i in range(256):
    for j in range(256):
      colors = np.zeros((3,1))
      for c in range(3):
        if img[i][j][c] < 64 : colors[c] = 0
        elif img[i][j][c] < 128 : colors[c] = 1
        elif img[i][j][c] < 192 : colors[c] = 2
        else : colors[c] = 3
      img_new[i][j] = colors[0]*16 + colors[1]*4 + colors[2]

  return img_new

def quantize_colors_8(img):
  img_new = np.zeros((256,256))

  for i in range(256):
    for j in range(256):
      colors = np.zeros((3,1))
      for c in range(3):
        if img[i][j][c] < 32 : colors[c] = 0
        elif img[i][j][c] < 64 : colors[c] = 1
        elif img[i][j][c] < 96 : colors[c] = 2
        elif img[i][j][c] < 128 : colors[c] = 3
        elif img[i][j][c] < 160 : colors[c] = 4
        elif img[i][j][c] < 192 : colors[c] = 5
        elif img[i][j][c] < 224 : colors[c] = 6
        else : colors[c] = 7
      img_new[i][j] = colors[0]*64 + colors[1]*8 + colors[2]

  return img_new

def get_correlogram(img):
  distances = [1, 3, 5, 7]
  correlogram = list()

  clr = 8*8*8

  W = img.shape[0]
  H = img.shape[1]
  
  for d in distances:
    color_count = np.zeros((clr,1))
    count = 0

    for x in range(0, W, max(1,int(d/2))):
      for y in range(0, H, max(1, int(d/2))):
        cxy = img[x][y]

        neigh = []

        n1 = (x + d, y + d)
        n2 = (x + d, y)
        n3 = (x + d, y - d)
        n4 = (x, y - d)
        n5 = (x - d, y - d)
        n6 = (x - d, y)
        n7 = (x - d, y + d)
        n8 = (x, y + d)

        neigh_temp = (n1, n2, n3, n4, n5, n6, n7, n8)

        for n in neigh_temp:
          if n[0] < W and n[0] >= 0 and n[1] < H and n[1] >= 0:
            neigh.append(n)

        for n in neigh:
          c_neigh = img[n[0]][n[1]]

          if c_neigh == cxy:
            count += 1
            color_count[cxy] += 1

    color_count /= count
    correlogram.append(color_count)

  correlogram = np.array(correlogram)
  return correlogram.reshape(len(distances),clr)

from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import os
import cv2

images = os.listdir('/content/drive/My Drive/HW-1/images_256x256/')
corello_folder = '/content/drive/My Drive/HW-1/cors_8c/'
corello_list = os.listdir(corello_folder)

print(len(images), len(corello_list))

for n, i in enumerate(images):
  print(str(n)+ " " + i)
  nm = '/content/drive/My Drive/HW-1/images_256x256/' + i

  j = i
  if ' ' in i:
    nm = '/content/drive/My Drive/HW-1/images_256x256/' + i[:i.find(' ')]+'.jpg'
    j = i[:i.find(' ')]+'.jpg'

  if (j[:j.find('.')]+'.pkl') in corello_list:
    print("Skipped")
    continue

  img = cv2.imread(nm,1)
  img_new = quantize_colors_8(img)
  img_new = img_new.astype(int)

  cc = get_correlogram(img_new)

  nm_out = corello_folder+i[:i.find('.')]+'.pkl'
  outfile = open(nm_out, 'wb')
  np.save(outfile, cc)
# -*- coding: utf-8 -*-
"""HW-1_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xPypqlKWYG9LGYeLhLDyIU4x8w8STG2C
"""

import numpy as np
def save_pixelvalues(cord, nm, img):
  pixels = []

  W = img.shape[0]
  H = img.shape[1]
  for blob in cord:
    y,x,r = blob

    pixels_blob = []

    neigh = []

    n1 = (x + 1, y + 1)
    n2 = (x + 1, y)
    n3 = (x + 1, y - 1)
    n4 = (x, y - 1)
    n5 = (x - 1, y - 1)
    n6 = (x - 1, y)
    n7 = (x - 1, y + 1)
    n8 = (x, y + 1)
    n9 = (x, y)

    neigh_temp = (n1, n2, n3, n4, n5, n6, n7, n8, n9)

    skip = False
    for n in neigh_temp:
      if n[0] < W and n[0] >= 0 and n[1] < H and n[1] >= 0:
        neigh.append(n)
      else:
        skip = True

    if skip:
      continue

    for n in neigh:
      pixels_blob.append(img[n[0]][n[1]])

    pixels.append(np.mean(pixels_blob))

  pixels = pixels[:400]
  outfile = open(nm, 'wb')
  np.save(outfile, pixels)

import json
import os
import numpy as np
def load_blobs():
  blobs = dict()
  blobs_list = os.listdir('/content/drive/My Drive/HW-1/blobs/')
  for n, blb in enumerate(blobs_list):
    print(n, end=" ")
    blob_cur = []
    blob_nm = '/content/drive/My Drive/HW-1/blobs/' + blb
    with open(blob_nm, 'rb') as file:
      blob_cur = np.load(file)
    blobs[blb] = blob_cur
  return blobs

#blobs = load_blobs()
#outfile = open('/content/drive/My Drive/HW-1/final_blobs.pkl', 'wb')
#np.save(outfile, blobs)

blobs = np.load('/content/drive/My Drive/HW-1/final_blobs.pkl', allow_pickle='True').item()
print(blobs)

import cv2
from pylab import *
import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage
from scipy.ndimage import filters
from scipy import spatial
import os
from operator import itemgetter

def LoG(sigma):
    n = np.ceil(sigma*6)

    y = np.arange(-n//2 , n//2+1, 1)
    y = y.reshape((y.shape[0], 1))
    x = np.transpose(y)
    
    sigma_square = sigma * sigma

    x_filter = np.exp(-(x*x/(2*sigma_square)))
    y_filter = np.exp(-(y*y/(2*sigma_square)))
    
    sigma_4 = sigma_square * sigma_square
    PI = np.pi

    final_filter = (-(2*sigma_square) + (x*x + y*y) ) *  (x_filter*y_filter) * (1/(2*PI*sigma_4))
    return final_filter

def LoG_convolve(img):

  log_images = [] 
  k = 1.414
  sigma = 1

  for i in range(0,9):
      y = np.power(k,i) 

      sigma_1 = sigma*y 

      filter = LoG(sigma_1) 
      imgf = cv2.filter2D(img,-1,filter)

      imgf = np.pad(imgf,((1,1),(1,1)),'constant')

      imgf = np.multiply(imgf, imgf)

      log_images.append(imgf)

  log_image_c = []
  
  for i in log_images:
     log_image_c.append(i)

  log_image_c = np.array(log_image_c)

  return log_image_c

def detect_blob(log_image_np, img):
    co_ordinates = [] 
    h = img.shape[1]
    w = img.shape[0]

    for i in range(1,h):
        for j in range(1,w):
            
            slice_img = log_image_np[:,i-1:i+2,j-1:j+2] 

            result = np.max(slice_img) 
            
            if result >= 0.03: 
                z,x,y = np.unravel_index(slice_img.argmax(),slice_img.shape)
                co_ordinates.append((i+x-1,j+y-1,k**z*sigma))

    #c = sorted(co_ordinates, reverse=True, key = itemgetter(3))
    
    #print(len(c))
    #cf = []
    #for ct in range(400):
    #  cf.append((c[ct][0], c[ct][1], c[ct][2])) 
    return co_ordinates

if __name__ == '__main__':

    images = os.listdir('/content/drive/My Drive/HW-1/images_256x256/')
    
    folder = '/content/drive/My Drive/HW-1/blobs/'

    blobs_list = os.listdir('/content/drive/My Drive/HW-1/blobs/')

    k = 1.414
    sigma = 1.0
  
    for n,i in enumerate(images):
        print(str(n) + " " +i)
        nm = '/content/drive/My Drive/HW-1/images_256x256/' + i

        j = i
        if ' ' in i:
          nm = '/content/drive/My Drive/HW-1/images_256x256/' + i[:i.find(' ')]+'.jpg'
          j = i[:i.find(' ')]+'.jpg'

        if (j[:j.find('.')]+'_blobs.pkl') in blobs_list:
          print("Skipped")
          continue

        img = cv2.imread(nm,0) 
        img = img/255.0 

        log_image = LoG_convolve(img)

        co_ordinates = list((set(detect_blob(log_image, img))))
        
        
        nm = folder+j[:j.find('.')]+'_blobs.pkl'

        outfile = open(nm, 'wb')
        np.save(outfile, co_ordinates)